package com.mooracle.core;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.rest.core.event.ValidatingRepositoryEventListener;
import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurerAdapter;
import org.springframework.validation.Validator;

/**
 * This new class is created under the session: Validation
 * This class is used to configure some parts of the validation process by overriding some default configuration
 * basically we want to tell invalid inputs long before submitting the input data to database.
 * Thus hence this class extends a class which designated as configurer adapter for Rest API repository
 * */
@Configuration
public class RestConfig extends RepositoryRestConfigurerAdapter {
    @Autowired
    private Validator validator; /*<- make sure to use the Spring framework validator not others. This is @Autowired
    to make it intantiated automatically when it was called (injected)*/

    /**
     * This override is generated by choice as we know if we extend a class (not an interface basically we already
     * have fully functioning methods. However, we can opt to modify or add those classes to meet our needs.
     * If there are two conflicting methods, the one that written in this class will override the super class method
     * */
    @Override
    public void configureValidatingRepositoryEventListener(ValidatingRepositoryEventListener validatingListener) {
        //super.configureValidatingRepositoryEventListener(validatingListener);<- this is the default method code

        /*--> Now let's start writing our own code to override the default configuration on how to validate events
        * concerning the Repository (database) of our API
        * */

        validatingListener.addValidator("beforeCreate", validator);/*<- this beforeCreate is a defined event
        name that must be inputted as it is no Syntax mistakes, this means it need to be validated before even
        instantiate a new entity object*/

        validatingListener.addValidator("beforeSave", validator);/*<- this basically the same as above in
        terms of naming rules. But this validator is placed before saving the entity to the database
        */

        /*--> Just like that in a few added code we for now we should have a working config that will cause our
        * validation to send a CLEAN Error message in the create and save event on the Repository
        * */
    }
}
